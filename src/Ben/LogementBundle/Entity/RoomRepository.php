<?php

namespace Ben\LogementBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * RoomRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RoomRepository extends EntityRepository
{
    public function findbyLogement($logement) {     
       $qb = $this->createQueryBuilder('r')
                ->leftJoin('r.block', 'b')
                ->leftJoin('b.logement', 'l')
                ->andWhere('l.id = :logement')
                ->setParameter('logement', $logement)
                ;
        return $qb->getQuery()->getResult();
    }

    public function findRoombyName($logement, $block, $room) {     
       $qb = $this->createQueryBuilder('r')
                ->leftJoin('r.block', 'b')
                ->leftJoin('b.logement', 'l')
                ->andWhere('r.name like :room')
                ->setParameter('room', $room)
                ->andWhere('b.name like :block')
                ->setParameter('block', $block)
                ->andWhere('l.name like :logement')
                ->setParameter('logement', $logement)
                ;
        if ($qb->getQuery()->getResult()) {
           return $qb->getQuery()->getResult()[0];
        }
        return null;
        
    }

    public function getFreeRooms($logement, $gender) {     
       $qb = $this->createQueryBuilder('r')
                ->leftJoin('r.block', 'b')
                ->leftJoin('b.logement', 'l')
                ->andWhere('b.type like :gender')
                ->setParameter('gender', $gender)
                ->andWhere('l.id = :logement')
                ->setParameter('logement', $logement)
                ->andWhere('r.free > 0')
                ;
        return $qb->getQuery()->getResult();
    }

    public function search($perPage, $page, $logement, $searchEntity) {     
       $qb = $this->createQueryBuilder('r')
                ->leftJoin('r.block', 'b')
                ->addSelect('b')
                ->leftJoin('b.logement', 'l')
                ->andWhere('l.id = :logement')
                ->setParameter('logement', $logement);

        if($searchEntity){
            if($searchEntity['block'] !== '')
                $qb->andWhere('b.id = :block')->setParameter('block', $searchEntity['block']);
            if($searchEntity['gender'] !== '')
                $qb->andWhere('r.gender = :gender')->setParameter('gender', $searchEntity['gender']);
            if($searchEntity['name'] !== '')
                $qb->andWhere('r.name = :name')->setParameter('name', $searchEntity['name']);
            if($searchEntity['floor'] !== '')
                $qb->andWhere('r.floor = :floor')->setParameter('floor', $searchEntity['floor']);
            if($searchEntity['capacity'] !== '')
                $qb->andWhere('r.capacity = :capacity')->setParameter('capacity', $searchEntity['capacity']);
            if($searchEntity['status'] === 'free')
                $qb->andWhere('r.free > 0');
            elseif($searchEntity['status'] === 'notfree')
                $qb->andWhere('r.free = 0');
        }


        $qb->setFirstResult(($page - 1) * $perPage)
        ->setMaxResults($perPage);

       return new Paginator($qb->getQuery());
    }


    public function counter($logement, $status = 'all') {
        $qb = $this->createQueryBuilder('r')
                ->select('COUNT(r)')
                ->leftJoin('r.block', 'b')
                ->leftJoin('b.logement', 'l')
                ->andWhere('l.id = :logement')
                ->setParameter('logement', $logement);
        if($status === 'free') 
            $qb->andWhere('r.free > 0');
        elseif ($status === 'notfree')
            $qb->andWhere('r.free > 0');

        return $qb->getQuery()->getSingleScalarResult();
    }
}
