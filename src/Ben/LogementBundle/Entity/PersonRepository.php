<?php

namespace Ben\LogementBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Ben\LogementBundle\Entity\Person;

/**
 * PersonRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PersonRepository extends EntityRepository
{


    public function search($nombreParPage, $page, $keyword, $type, $status, $searchEntity, $logement) {       
       $qb = $this->createQueryBuilder('p')
                ->leftJoin('p.logement', 'l')
                ->andWhere('l.id = :logement')
                ->setParameter('logement', $logement)
                ->leftJoin('p.etablissement', 'e')
                ->andWhere('p.family_name like :keyword or p.first_name like :keyword or p.email like :keyword')
                ->setParameter('keyword', '%'.$keyword.'%');
                 
        if($type !== 'all')
            $qb->andWhere('p.type = :type')->setParameter('type', $type);
        if($status !== 'all')
            $qb->andWhere('p.status = :status')->setParameter('status', $status);
        if($searchEntity){
            if($searchEntity['dossier'] !== '')
                $qb->andWhere('p.n_dossier = :dossier')->setParameter('dossier', $searchEntity['dossier']);
            if($searchEntity['gender'] !== '')
                $qb->andWhere('p.gender = :gender')->setParameter('gender', $searchEntity['gender']);
            if($searchEntity['city'] !== '')
                $qb->andWhere('p.city = :city')->setParameter('city', $searchEntity['city']);
            if($searchEntity['exellence'] !== '')
                $qb->andWhere('p.exellence = :exellence')->setParameter('exellence', $searchEntity['exellence']);
            if($searchEntity['parents_revenu'] !== '')
                $qb->andWhere('p.parents_revenu = :parents_revenu')->setParameter('parents_revenu', $searchEntity['parents_revenu']);
            if($searchEntity['bro_sis_number'] !== '')
                $qb->andWhere('p.bro_sis_number = :bro_sis_number')->setParameter('bro_sis_number', $searchEntity['bro_sis_number']);
            if($searchEntity['distance'] !== '')
                $qb->andWhere('p.distance = :distance')->setParameter('distance', $searchEntity['distance']);
            if($searchEntity['ancientete'] !== '')
                $qb->andWhere('p.ancientete = :ancientete')->setParameter('ancientete', $searchEntity['ancientete']);
            if($searchEntity['etablissement'] !== '')
                $qb->andWhere('e.id = :etablissement')->setParameter('etablissement', $searchEntity['etablissement']);
        }

        $qb->setFirstResult(($page - 1) * $nombreParPage)
        ->setMaxResults($nombreParPage);

       return new Paginator($qb->getQuery());
    }

    public function getList($logement, $gender, $type, $limit) {       
       $qb = $this->createQueryBuilder('p')
                ->leftJoin('p.logement', 'l')
                ->andWhere('l.id = :logement')
                ->setParameter('logement', $logement)
                ->andWhere('p.status = :status')
                ->setParameter('status', Person::$valideStatus)
                ->andWhere('p.gender = :gender')
                ->setParameter('gender', $gender);
        if($type !== 'all')
            $qb->andWhere('p.type = :type')->setParameter('type', $type);

        $qb->setMaxResults($limit)->orderBy('p.note', 'DESC');

       return $qb->getQuery()->getResult();
    }

    public function counter($logement, $status) {
        $qb = $this->createQueryBuilder('p')
                ->select('COUNT(p)')
                ->leftJoin('p.logement', 'l')
                ->andWhere('l.id = :logement')
                ->setParameter('logement', $logement);
        if($status != 'all') 
            $qb->andWhere('p.status like :status')->setParameter('status', $status);

        return $qb->getQuery()->getSingleScalarResult();
    }
}
